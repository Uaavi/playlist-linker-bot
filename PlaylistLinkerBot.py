import os
import asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from pathlib import Path

load_dotenv(dotenv_path=Path(__file__).parent / "PlaylistLinkerBot.env")

print("DEBUG client_id:", os.getenv("SPOTIFY_CLIENT_ID"))  # –º–∞—î –≤–∏–≤–µ—Å—Ç–∏ client_id, —è–∫—â–æ .env –ø—Ä–∞—Ü—é—î

# –¢–æ–∫–µ–Ω–∏ –∑ .env
SPOTIFY_CLIENT_ID = os.getenv("SPOTIFY_CLIENT_ID")
SPOTIFY_CLIENT_SECRET = os.getenv("SPOTIFY_CLIENT_SECRET")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# Spotify –∫–ª—ñ—î–Ω—Ç
sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(
    client_id=SPOTIFY_CLIENT_ID,
    client_secret=SPOTIFY_CLIENT_SECRET
))


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–µ–∫—ñ–≤ –∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
def get_tracks(playlist_url):
    playlist_id = playlist_url.split("/")[-1].split("?")[0]
    results = sp.playlist_tracks(playlist_id)
    tracks = results['items']
    while results['next']:
        results = sp.next(results)
        tracks.extend(results['items'])
    return [t['track']['external_urls']['spotify'] for t in tracks]


# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if "open.spotify.com/playlist" in text:
        await update.message.reply_text("‚è≥ –û–±—Ä–æ–±–ª—è—é –ø–ª–µ–π–ª–∏—Å—Ç...")

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç—É
        keyboard = [
            [
                InlineKeyboardButton("–ö–æ–∂–Ω—É –ø—ñ—Å–Ω—é –æ–∫—Ä–µ–º–æ", callback_data="separate"),
                InlineKeyboardButton("–í—Å—ñ –ø—ñ—Å–Ω—ñ –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ", callback_data="all_in_one")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å, —è–∫ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—ñ—Å–µ–Ω—å:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç Spotify üéß")


# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏

    text = query.message.text
    playlist_url = query.message.reply_to_message.text  # –û—Ç—Ä–∏–º—É—î–º–æ URL –ø–ª–µ–π–ª–∏—Å—Ç–∞

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ—Å–µ–Ω—å
    links = get_tracks(playlist_url)

    if query.data == "separate":
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–Ω—É –ø—ñ—Å–Ω—é –æ–∫—Ä–µ–º–æ
        for i, link in enumerate(links, start=1):
            await query.message.reply_text(f"{i}. {link}")
            await asyncio.sleep(0.3)  # –∑–∞—Ç—Ä–∏–º–∫–∞, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ç–∞–π–º–∞—É—Ç—ñ–≤
    elif query.data == "all_in_one":
        # –í—Å—ñ –ø—ñ—Å–Ω—ñ –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
        message = "\n".join([f"{i}. {link}" for i, link in enumerate(links, start=1)])
        await query.message.reply_text(message)


# –ö–æ–º–∞–Ω–¥–∞ /stop –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")
    await context.application.shutdown()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.add_handler(CommandHandler("stop", stop))  # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /stop
app.add_handler(CallbackQueryHandler(button))  # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
app.run_polling()
